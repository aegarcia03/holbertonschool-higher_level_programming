==========================
2. Divide a matrix
==========================

Import module:
===============
    >>> matrix_divided  = __import__('2-matrix_divided').matrix_divided

Usage:
=======
``matrix_divided(matrix, div)`` returns a new matrix result of the division
    of all elements by div

# Test valid inputs
Note that quotients are rounded to a maximum of two decimal places.
The original matrix is left unchanged.

    >>> matrix = [
    ...         [2, 4, 6], 
    ...         [8, 10, 12]
    ... ]

    >>> matrix_divided(matrix, 2)
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

The function works with float values
    >>> matrix = [
    ...         [2.2, 4.4, 6.6], 
    ...         [8.8, 10.2, -12.2]
    ... ]
       
    >>> matrix_divided(matrix, 2)
    [[1.1, 2.2, 3.3], [4.4, 5.1, -6.1]]

Floats and integers can be combined:
    >>> matrix = [
    ...         [2.2, 4, -6], 
    ...         [8, 10.2, 12.2]
    ... ]
       
    >>> matrix_divided(matrix, 2)
    [[1.1, 2.0, -3.0], [4.0, 5.1, 6.1]]


Invalid Matrices
================

The function expects that "matrix" is a list of lists that are either Floats or Integers.
In case this condition is not met, a TypeError is raised:

    >>> matrix = "This is not a matrix"

    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = None

    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that a empty list of lists will succeed, however, 
an empty list will raise a TypeError:

    >>> matrix = []

    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [[]]

    >>> matrix_divided(matrix, 2)
    [[]]

    >>> matrix = [
    ...         [2.2, "hello", -6], 
    ...         [8, 10.2, "school"]
    ... ]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Each row of the matrix must be of the same size.
In case this condition is not met, a TypeError is raised:

    >>> matrix = [
    ...         [2, 4, 6, 14],
    ...         [8, 10.2, 12.2]
    ... ]
    
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

Invalid Divisors 
=================
The function expects that the variable div must be a number either integer or float
In case this condition is not met, a TypeError is raised:

        >>> matrix = [
        ...         [2.2, 4, -6], 
        ...         [8, 10.2, 12.2]
        ... ]
        
        >>> matrix_divided(matrix, "this is not a number")
        Traceback (most recent call last):
        ...
        TypeError: div must be a number

The function expects that the variable div cannot be equal to 0
In case this condition is not met, a ZeroDivisionError is raised:
        >>> matrix = [
        ...         [2.2, 4, -6], 
        ...         [8, 10.2, 12.2]
        ... ]

        >>> matrix_divided(matrix, 0)
        Traceback (most recent call last):
        ...
        ZeroDivisionError: division by zero
