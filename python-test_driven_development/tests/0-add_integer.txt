==========================
0. Integers addition
==========================

Import module:
===============
    >>> add_integer = __import__('0-add_integer').add_integer

Usage:
=======
``add_integer(a, b=98)`` returns the addition of its two arguments.

# Test valid inputs
    >>> add_integer(1, 4)
    5
    >>> add_integer(63, -2)
    61

The function works with float valies.
Note that the floats are cast to ints before addition is performed:
    >>> add_integer(12.5, 11.5)
    23
    >>> add_integer(1, 2.5)
    3

Floats and ints can be combined:
    >>> add_integer(-1, 2.5)
    1

The second argument is optional, by defaults to 98:
    >>> add_integer(1)
    99

Non-Numbers
===========

The function expects that both arguments are either Floats or Integers.
In case this condition is not met, a TypeError is raised:

    >>> add_integer("School", 98)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(98, "School")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(2, float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

With NaN numbers:
    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer