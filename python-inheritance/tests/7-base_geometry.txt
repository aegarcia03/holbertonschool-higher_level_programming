==========================
7. Integer validator
==========================
This module defines a class ``BaseGeometry``

Instantiation
==============
`BaseGeometry` includes no attributes

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>


Methods
=======
`BaseGeometry` has two methods:

1. 'area(self)` is not yet implemented

    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

2. `integer_validator(self, name, value)` validates value, however, if 'value'
is a valid integer the function does nothing

    >>> bg.integer_validator("my_int", 12)

The function expects that `value` is an integer.
In case this condition is not met, a TypeError is raised:

    >>> bg.integer_validator("name", "angela")
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

    >>> bg.integer_validator("tuple", (4,))
    Traceback (most recent call last):
        ...
    TypeError: tuple must be an integer

    >>> bg.integer_validator("list", [3])
    Traceback (most recent call last):
        ...
    TypeError: list must be an integer

    >>> bg.integer_validator("dic", {3, 4})
    Traceback (most recent call last):
        ...
    TypeError: dic must be an integer

    >>> bg.integer_validator("None", None)
    Traceback (most recent call last):
        ...
    TypeError: None must be an integer


The function expects that value is greater than zero.
In case this condition is not met, a ValueError is raised:

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
        ...
    ValueError: age must be greater than 0

    >>> bg.integer_validator("distance", -6)
    Traceback (most recent call last):
        ...
    ValueError: distance must be greater than 0

