===========================
1. My list
==========================
This module defines a class ``MyList`` that inherits from ``list``.

Import module:
===============
    >>> print_sorted = __import__('1-my_list').MyList

Usage:
======
`print_sorted(self)` prints the list in sorted ascending order

# Test valid inputs:
``MyList`` is an inherited ``list`` class. Elements can be added to it with
the append() method.

# Example:
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

Instantiation:
==============
``MyList`` can be instantiated with no arguments, which will return
an empty list:

    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>
    >>> print (my_list)
    []

print_sorted() method
========================
The method prints the list in ascending sorted order, with sorted append ()

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.print_sorted()
    [1, 2, 3]

The method prints the list in ascending sorted order, with not sorted append()
The print_sorted method prints a sorted version of the list but does not change the order of my_list.
    >>> my_list = MyList()
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> my_list.append(1)
    >>> print(my_list)
    [3, 2, 1]


The method prints the list in ascending sorted order, with negative number.
    >>> my_list = MyList()
    >>> my_list.append(3)
    >>> my_list.append(-2)
    >>> my_list.append(1)
    >>> my_list.print_sorted()
    [-2, 1, 3]

The method will not sort an empty list.
    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []


